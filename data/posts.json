[
  {
    "name": "2017-07-13-fetch-cors",
    "title": "学习记录 Fetch API mode 跨域模式",
    "date": "2017-07-13",
    "tags": [
      "JavaScript"
    ],
    "content": "<p>  之前给自己的博客站添加了 Service Worker 服务，其中涉及到请求跨域资源，参考的<a href=\"https://www.w3ctech.com/topic/866#fetch-\">资料</a>有讲，对于跨域的资源可以加上参数 <code>fetch(url, {mode: &#39;cors&#39;})</code>，代表跨域请求，但是昨天在引入第三方统计服务时报错该资源不允许跨域，一头雾水的我决定好好研究一下这个问题究竟是怎么回事<!--more--></p>\n<h2 id=\"-\">参数的默认值</h2>\n<p>  容易记混 mode 属性的默认值，特地记录一下：</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tKfTcly1fhibgv5le5j312i0f4jtn.jpg\" alt=\"fetch\"></p>\n<p>  Fetch 请求的第一个参数可以是 Request 对象，也可以是 URL 字符串，如果是字符串，mode 的默认参数是 no-cors</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 相当于</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'no-cors'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>而如果第一个参数是 Request，这里存在一种情况是在 Request 对象里声明 mode 属性值，这里的属性值默认是 cors</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 相当于</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 这里的 cors 优先级比 fetch 的默认值 no-cors 高</span>\n</code></pre>\n<p>根据 <a href=\"https://fetch.spec.whatwg.org/#concept-filtered-response-opaque\">Fetch 草案</a>, Fetch mode 属性有 5 个值，分别是 <code>same-origin</code>, <code>cors</code>, <code>no-cors</code>, <code>navigate</code>, 和 <code>websocket</code>，我主要研究了一下 <code>same-origin</code>, <code>cors</code>, <code>no-cors</code>这三个</p>\n<p><code>same-origin</code>：同域，设置此属性值请求跨域资源报错</p>\n<p><code>cors</code>：允许跨域请求，不过需要服务端设置 <code>Access-Control-Allow-Origin: *</code>，如果服务端没有设置会报错</p>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNc79ly1fhibhfm0v1j30wo044wg3.jpg\" alt=\"5D5742D0-82F7-4DB8-B47A-8B370831D47B\"></p>\n<p><code>no-cors</code>:  不允许跨域，请求跨域资源会返回一个 opaque 的 response 实例，</p>\n<p><img src=\"/var/folders/tt/2xrd2dwx78z62pbz_3dpzr500000gn/T/abnerworks.Typora/30737B97-71E8-4E60-BFC3-F5E1150C26ED.png\" alt=\"30737B97-71E8-4E60-BFC3-F5E1150C26ED\"></p>\n"
  },
  {
    "name": "2017-07-11-redux-analyze-1",
    "title": "Redux 思想和源码解读（一）",
    "date": "2017-07-11",
    "tags": [
      "JavaScript",
      "React"
    ],
    "content": "<blockquote>\n<p>Predictable state container for JavaScript apps <a href=\"http://redux.js.org\">http://redux.js.org</a></p>\n</blockquote>\n<p>  学习 React 也有段时间了，早就听说各种状态( state )管理工具大行其道，几个月前曾看过 Redux 官方几个例子，不明所以却没有再继续研究下去。\n  前两天恰逢其会，看到一系列实现 Redux 的文章，借着这个由头仔细研读了官方文档和源码，算是对 Redux 有了一个比较深入的了解，介于网上各种资料的繁杂和讲解不够透彻，我打算写下这篇文章将我理解的 Redux 思想和实现原理娓娓道来，说的不详尽的地方，大家尽可以指出，改与不改要看我勤不勤快了。<!--more--></p>\n<h2 id=\"redux-\">Redux 是做什么的</h2>\n<p>  redux 官方介绍是可预测的状态管理工具，希望大家不要拘泥于和 react 一起使用。</p>\n<p>  胡子大哈的 <a href=\"http://huziketang.com/books/react/lesson30\">动手实现 Redux</a> 这系列文章讲的很好，以一个简单的例子说明了项目引入 redux 的原因。</p>\n<p>  如果你写过 React 项目，一定会对这种情况感到熟悉，父组件的 <code>state</code> 属性传递给子组件做 <code>props</code>， 子组件根据 <code>props</code> 渲染视图。简单的组件嵌套应用中状态改变和 debug 都很容易，一旦子组件上加入他人写的处理层模块，或者逻辑复杂多层嵌套触发 state 变化时，debug 一些问题时就比较棘手。你很难搞清楚最后的 state 是经由哪一层组件改变的，这时只能挨个去组件内部 <code>console.log(this.props)</code>查看了。</p>\n<p>  redux 的出现就是 react 项目组为了解决日益复杂的程序中如何管理 state 的问题而提出的，这个演变过程我没研究过，结果就是层层演进到了现在，形成一个稳定好用的版本即 Redux 。</p>\n<h3 id=\"-state\">怎么管理 state</h3>\n<p>  既然目的是更好的管理 state 变化和方便追踪，那就不要可以随便改变 state 了，redux 的思想是触发 state 变化加上一把锁，读取 state 加上一把锁，表面看起来较之前的使用方式复杂了许多，但你可以在锁上加一些 middleware 中间件，由于 state 被统一管理起来，你可以随意查看 state 变化、在变化前后做些自定义事件。</p>\n<p>   这里可以引申出 redux 的三大原则：</p>\n<ul>\n<li><p>单一数据源 ( Single source of truth )\n<code>整个应用的 state 被统一管理在唯一对象树 store 中</code></p>\n</li>\n<li><p>State 是只读的 ( State is read-only )\n<code>state 的变化只能通过触发 action 去改变</code></p>\n</li>\n<li><p>使用纯函数来执行修改 ( Changes are made with pure functions )\n<code>使用纯函数来描述 action，这里管这种函数叫做 reducer</code></p>\n</li>\n</ul>\n<p>这里可以说说为什么改变 state 的函数叫 reducer，大家知道 Array 有个迭代方法叫 reduce，reducer 的意义和此相似，都是传入前一个值，返回一个新的值</p>\n<blockquote>\n<p>pure function 纯函数简单说就是传入一个固定值，无论执行多少遍返回值都不变的函数</p>\n</blockquote>\n<p><img src=\"https://p5.ssl.qhimg.com/t014b5afa2e362ac314.png\" alt=\"Redux 运行图\"></p>\n<p>  用一个例子来说明 redux 的运行时序：\n  初始 state 渲染按钮 ------&gt; 点击增加按钮 ------&gt;  调用 dispatch(IncrementAction)  ------&gt; \n  reducer 处理 IncrementAction 返回 newState ------&gt; 重渲染按钮</p>\n<h3 id=\"-\">实例</h3>\n<p>  光看概念容易头脑不清楚，上代码</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// reducer 处理 action，返回 newState</span>\n<span class=\"token keyword\">const</span> appReducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'UPDATE_HEADER'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> header<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>header <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'UPDATE_BODY'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> body<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>body <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 创建唯一 store</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>appReducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  header<span class=\"token punctuation\">:</span> <span class=\"token string\">'Header'</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token punctuation\">:</span> <span class=\"token string\">'Body'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> renderHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render header'</span><span class=\"token punctuation\">)</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'header'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>header\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> renderBody <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'render body'</span><span class=\"token punctuation\">)</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>body\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">renderHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">renderBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/* 数据发生变化 */</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'UPDATE_HEADER'</span><span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">:</span> <span class=\"token string\">'New Header'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'UPDATE_BODY'</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">:</span> <span class=\"token string\">'New Body'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>renderHeader<span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>renderBody<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这里有几个 API 之前没有提，分别是 <code>createStore</code>、<code>dispatch</code>、<code>subscribe</code>、<code>getState</code>，我简单介绍一下</p>\n<ul>\n<li><code>createStore(reducer, [preloadedState], enhancer)</code> 创建 store 管理整个应用，返回一个 <code>Store</code> 对象，对象具有<code>dispatch</code>、<code>subscribe</code>、<code>getState</code>三个方法</li>\n<li><code>getState</code> 返回应用当前的 state</li>\n<li><code>dispatch(action)</code> 分发 action，改变 state 的唯一途径</li>\n<li><code>subscribe(listener)</code> 添加侦听器，订阅 state 变化</li>\n</ul>\n<p>上面的例子解释一下，首先创建了 store 应用容器，添加侦听器，每次 state 变化，重新渲染 Header 和 Body，1s 后派发更新事件，UI 改变。</p>\n<p>可以看到没有在 1s 后直接改变 Header 和 Body 的 innerHTML，而是通过 appReducer 处理 action 里的内容，返回新的 state，这样做的好处是改变 state 只能通过 dispatch 方法，如果有意外情况发生，可以去查找哪个地方调用了 dispatch，同时还可以细分 action.type 更好的定位问题。</p>\n<blockquote>\n<p>有没有感觉只是把简单问题复杂化了？看起来就是这样，操作的门槛提高了，才不会导致 state 滥用</p>\n</blockquote>\n<h3 id=\"-\">复杂问题简单化</h3>\n<p>从上面的例子可以看出，经由 redux 处理后的应用，若想监听 state 变化都要 subscribe 注册，未免有些麻烦，同时，每次 dispatch action，所有 subscribe 过的组件都会重新渲染，浪费了性能，一种做法是在组件内部做 state 的简单判断，react 可以用 <code>shouldComponentUpdate()</code> 方法，或者继承自 <code>React.PureComponent</code></p>\n<p>为了节省工具使用人员的时间和提高性能，不同框架和 redux 的结合工具应运而生，比如 react 的 react-redux，这个我们下次再讲。</p>\n<h3 id=\"-redux\">怎么实现一个 Redux</h3>\n<p>现在来总结一下，如果要我们手写一个 redux 需要写些什么</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// 创建 store</span>\n<span class=\"token keyword\">const</span> createStore <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">,</span> enhancer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 执行中间件，俗称钩子</span>\n    <span class=\"token function\">enhancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> getState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 返回 unsubscribe 函数</span>\n    <span class=\"token keyword\">const</span> subscribe <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> unsubscribe <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>getState<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">,</span> subscribe<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 钩子中间件</span>\n<span class=\"token keyword\">const</span> applyMiddleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>主要逻辑就是这两个函数，看起来功能也非常简单直观，这就是 Redux 做的事情，下一节我们详细分析一下 redux 的源码</p>\n"
  },
  {
    "name": "2017-07-11-redux-analyze-2",
    "title": "Redux 思想和源码解读（二）",
    "date": "2017-07-11",
    "tags": [
      "JavaScript",
      "React"
    ],
    "content": "<blockquote>\n<p>Predictable state container for JavaScript apps <a href=\"http://redux.js.org\">http://redux.js.org</a></p>\n</blockquote>\n<p>  学习 React 也有段时间了，早就听说各种状态( state )管理工具大行其道，几个月前曾看过 Redux 官方几个例子，不明所以却没有再继续研究下去。\n  前两天恰逢其会，看到一系列实现 Redux 的文章，借着这个由头仔细研读了官方文档和源码，算是对 Redux 有了一个比较深入的了解，介于网上各种资料的繁杂和讲解不够透彻，我打算写下这篇文章将我理解的 Redux 思想和实现原理娓娓道来，说的不详尽的地方，大家尽可以指出，改与不改要看我勤不勤快了。<!--more--></p>\n<h2 id=\"-\">源码解析</h2>\n<p>毕竟本文不是入门教程，主要的目的还是通过阅读源码提高自己的架构能力，所以，直入正题啦，先看 github 目录。\n<img src=\"https://p0.ssl.qhimg.com/t01f8719bfc8566d4c5.png\" alt=\"Redux 代码结构\"></p>\n<p>redux 代码量非常少，不压缩才 2K 而已，核心方法只有 5 个，其中还有大量的类型检测，通读下来简单易懂（万万没想到，各种衍生工具代码量指数倍上涨）</p>\n<p>咱们从基础方法开始。</p>\n<h3 id=\"createstore\">createStore</h3>\n<p>下面是我精简过的 creatStore 源码，官方还有 obervable 观察器相关代码，因为我从未使用过暂时省略。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Creates a Redux store that hold the state tree\n * @param {Function} reducer\n * @param {any} [preloadedState]\n * @param {Function} [enhancer]\n * @returns {Store}, you can dispatch actions to change state, read the state and subscribe to change\n */</span>\n<span class=\"token keyword\">const</span> createStore <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> preloadedState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> enhancer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 一堆类型检测</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> reducer <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected the reducer to be a function.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> preloadedState <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> enhancer <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    enhancer <span class=\"token operator\">=</span> preloadedState<span class=\"token punctuation\">;</span>\n    preloadedState <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * enhancer 处理中间件\n * ... 暂时省略，讲 applyMiddleware 方法的时候再说\n */</span>\n\n  <span class=\"token keyword\">let</span> currentState <span class=\"token operator\">=</span> preloadedState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> currentListeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nextListeners <span class=\"token operator\">=</span> currentListeners<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> isDispatching <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// dispatch 的时候需使用侦听器副本，防止 unsubscribe 时打乱侦听器数组顺序</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 侦听器的改变均反映在 nextListeners 里</span>\n  <span class=\"token comment\" spellcheck=\"true\">// dispatch 调用时更新 currentListeners</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 即，每次侦听器要改变时使用当前侦听器副本 currentListeners.slice() ，改变副本值，dispatch 时再赋给 currentListeners</span>\n  <span class=\"token keyword\">const</span> ensureCanMutateNextListeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nextListeners <span class=\"token operator\">===</span> currentListeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nextListeners <span class=\"token operator\">=</span> currentListeners<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> getState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> currentState<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>action <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> action <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected the action to be a object.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Actions may not have \"type\" property.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDispatching<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Reducers may not dispatch actions.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 得到 newState</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      isDispatching <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      currentState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      isDispatching <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 更新 currentListeners</span>\n    <span class=\"token keyword\">let</span> listeners <span class=\"token operator\">=</span> currentListeners <span class=\"token operator\">=</span> nextListeners<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// for 循环比 forEach 性能好</span>\n    <span class=\"token comment\" spellcheck=\"true\">// (https://github.com/reactjs/redux/commit/5b586080b43ca233f78d56cbadf706c933fefd19)</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> listeners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> listener <span class=\"token operator\">=</span> listeners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 此处返回 action，方便链式调用</span>\n    <span class=\"token keyword\">return</span> action<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 典型的注册侦听模式</span>\n  <span class=\"token keyword\">const</span> subscribe <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> listener <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected the listener to be a function.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> isSubscribed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 改变侦听器前使用 currentListeners 副本</span>\n    <span class=\"token function\">ensureCanMutateNextListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nextListeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isSubscribed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      isSubscribed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 改变侦听器前使用 currentListeners 副本</span>\n      <span class=\"token function\">ensureCanMutateNextListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> nextListeners<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nextListeners<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 简单替换，替换后初始化 state</span>\n  <span class=\"token keyword\">const</span> replaceReducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newReducer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> newReducer <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected the reducer to be a function.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    reducer <span class=\"token operator\">=</span> newReducer<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'@@redux_init'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 初始化 state</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 需要 action 有默认 state</span>\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'@@redux_init'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>getState<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">,</span> subscribe<span class=\"token punctuation\">,</span> replaceReducer<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这部分代码初看时，有两处让我疑惑，一是使用 for 代替 forEach，二是引入 currentListeners 和 nextListeners，经过查看代码的 History、PR 后才了解作者的意图。</p>\n<p>for 代替 forEach 纯粹是出于性能考虑，这有个<a href=\"https://jsperf.com/quick-for-vs-foreach\">例子</a> 可以看出，forEach 慢的不是一星半点。</p>\n<p>之所以引入 currentListeners 和 nextListeners 变量就是因为解决采用 for 循环引起的问题。</p>\n<p>比如有数组 [1, 2, 3, 4, 5]，当执行到 i == 1 的时候调用 unsubscribe 删除了数组第一项 1，下一次循环时从 i == 2，也就是从 4 开始执行响应逻辑，导致跳过了 3 这个值。为了解决这个问题，每次 dispatch 的时候都应该调用 listeners 的副本，大家可以看下这段代码的 history：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// 最开始替换 for 循环时的代码</span>\n<span class=\"token keyword\">var</span> currentListeners <span class=\"token operator\">=</span> listeners<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> currentListeners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  currentListeners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这样做会导致每次执行 dispatch 方法时都会复制一份 listeners，存在很大的浪费，我们只需要在 listeners 确实改变的时候获取副本就可以了，所以将 slice 操作放到 subscribe 方法中。</p>\n<h3 id=\"combinereducers\">combineReducers</h3>\n<p>这里我删除了环境判断和错误警告语句</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">/**\n * combine reducers, return the state pass the each reducer\n * reducers key is the state key\n * @param reducers\n * @returns {Function}\n */</span>\n<span class=\"token keyword\">const</span> combineReducers <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 先进行健全检查</span>\n  <span class=\"token keyword\">const</span> reducerKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> finalReducers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> reducerKeys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> reducerKeys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> reducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      finalReducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> reducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> finalReducerKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>finalReducers<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">combination</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> nextState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> hasChanged <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> finalReducerKeys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> finalReducerKeys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> finalReducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">const</span> previousStateForKey <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 得到 newState</span>\n      <span class=\"token keyword\">const</span> nextStateForKey <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>previousStateForKey<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n      nextState<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nextStateForKey\n      hasChanged <span class=\"token operator\">=</span> hasChanged <span class=\"token operator\">||</span> nextStateForKey <span class=\"token operator\">!==</span> previousStateForKey\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> hasChanged <span class=\"token operator\">?</span> nextState <span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>combineReducers 的代码很简单，作用就是拆分 Reducers，使用最终的 stateKey 作为 combineReducers 参数对象的 key，参数对象的值为 stateKey 对应的 stateReducer。</p>\n<p>举个例子：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> doSomethingWithA<span class=\"token punctuation\">,</span>\n  b<span class=\"token punctuation\">:</span> processB<span class=\"token punctuation\">,</span>\n  c<span class=\"token punctuation\">:</span> c\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 等于</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token function\">doSomethingWithA</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token function\">processB</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    c<span class=\"token punctuation\">:</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>这块有个问题，为什么写了一大段 for 循环去处理 <code>finalReducers</code>，我们明明可以很方便的拷贝 reducers 如 <code>const finalReducers = Object.assign({} ,reducers);</code>，再把类型判断放到下面的执行函数中，节省好多行代码。</p>\n<p>抱着这样的疑问我提了个 issue，作者告诉我这属于他们团队开发的一个规范，在执行真正的处理逻辑之前做完所有的健全性检查，保证处理逻辑的功能单一。</p>\n<h3 id=\"bindactioncreators\">bindActionCreators</h3>\n<p>有一种函数叫做 actionCreator，传递参数后返回一个 action，比如</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> addTodo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'ADD'</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> todo\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>在应用中需要添加新 action 的时候，需要先 <code>addTodo(string)</code> 再 <code>dispatch(action)</code>，每次这么写太麻烦，所以官方提供了bindActionCreators方法，这只是一个<code>dispatch(actionCreator(param))</code>的语法糖。</p>\n<p>同时此方法可以合并多个actionCreator，便于向子组件传递，省的每个子组件都要一一引入相同 actionCreator 或者父组件传递一堆 actionCreator，简言之就是一个工具函数。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>actionCreator<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">actionCreator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Target is pass some action creators down to a component\n * @param {Function | Object} actionCreators\n * @param {Function} dispatch\n * @returns {Function|Object}\n */</span>\n<span class=\"token keyword\">const</span> bindActionCreators <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>actionCreators<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> actionCreators <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>actionCreators<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> actionCreators <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> actionCreators <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'actionCreator expected  an object or a function.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>actionCreators<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> boundActionCreators <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> actionCreator <span class=\"token operator\">=</span> actionCreators<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> actionCreator <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      boundActionCreators<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>actionCreator<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> boundActionCreators<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>参数是 actionCreators 对象，返回一个包装过的对象，对象中每个 key 的值是 <code>dispatch(key(param))</code>的函数。</p>\n<h3 id=\"compose\">compose</h3>\n<p>这也是一个工具函数，主要用于装配中间件，大家可以拿出去当作自己的常备工具库。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">/**\n * compose many function deal with dispatch\n * @param funcs\n * @returns {*}\n */</span>\n<span class=\"token keyword\">const</span> compose <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>funcs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 两种特殊情况</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>funcs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> args <span class=\"token operator\">=</span><span class=\"token operator\">></span> args<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>funcs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> funcs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> funcs<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>利用 <code>Array.prototype.reduce</code>方法，包洋葱式处理参数，也算是一种链式调用。</p>\n<h3 id=\"applymiddleware\">applyMiddleware</h3>\n<p>中间件函数，基于 redux 的很多库都是利用这个机制，在 dispatch 函数的执行前后挂上钩子，这种中间件的做法已经很常见了，比如 Express 和 koa。</p>\n<p>我们先分析一下如何给我们的 Redux 挂上中间件，我们想要的是控制 state 变化前后，也就是 dispatch 方法前后执行自定义的方法，一种方式是</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> middlewares<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  middlewares<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这种方法每个 middleware 互不影响，也无法共同合作，还有一种就是</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">middleware3</span><span class=\"token punctuation\">(</span><span class=\"token function\">middleware2</span><span class=\"token punctuation\">(</span><span class=\"token function\">middleware1</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>每个中间件处理上一个中间件处理后的结果，像是管道流通，每部分管道只要保证能把最初的 action 传下去就可以了，管道之间可以合作和拆分，是比较流行的中间件处理方法。Redux 采用的是后一种方法。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">/**\n * load middleware\n * applyMiddleware() can as an enhancer\n * @param middlewares\n * @returns {function()}\n */</span>\n<span class=\"token keyword\">const</span> applyMiddleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>middlewares<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>createStore<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">,</span> enhancer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 只改变 dispatch 函数</span>\n    <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">,</span> enhancer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> dispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> chain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 将 getState 和 dispatch 方法暴露给中间件</span>\n    <span class=\"token keyword\">const</span> middlewareAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      getState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token punctuation\">,</span>\n      dispatch<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    chain <span class=\"token operator\">=</span> middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>middlewareAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 相当于 middleware3(middleware2(middleware1(dispatch))))</span>\n    dispatch <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      store<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>dispatch<span class=\"token punctuation\">:</span> dispatch<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>从源码中可以看出，经由 applyMiddleware 处理过的 store 只改变了 dispatch 方法，当调用 dispatch 方法时，会逐步调用中间件函数，最后一个中间件再调用 Redux 原生的 dispatch 方法</p>\n<p>这样一来，便对中间件函数的格式有所要求，中间件的格式需如下</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> middleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>middlewareAPI<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> \n  <span class=\"token comment\" spellcheck=\"true\">/* code */</span> \n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 作为下一个中间件的 action 参数</span>\n  <span class=\"token keyword\">return</span> action\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>举一个例子，我们想在每次状态变化时打印出变化前后的 log</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printStateMiddleware</span><span class=\"token punctuation\">(</span>middlewareAPI<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'state before dispatch'</span><span class=\"token punctuation\">,</span> middlewareAPI<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> returnValue <span class=\"token operator\">=</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'state after dispatch'</span><span class=\"token punctuation\">,</span> middlewareAPI<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> returnValue\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 调用</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>printStateMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>中间件已经定义出来了，<code>Store</code> 该怎么应用这些中间件呢，不知道大家注意到没有，<code>applyMiddleware</code> 返回函数的参数是 <code>creatStore</code>，此函数返回一个加载中间件后的 <code>Store</code></p>\n<p> 这也就是讲 <code>createStore</code> 函数时所省略的 <code>enhancer</code> 处理部分，相关代码如下：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> enhancer <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> enhancer <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected the enhancer to be a function.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">enhancer</span><span class=\"token punctuation\">(</span>createStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>enhancer</code> 函数就是 <code>applyMiddleware</code> 函数调用后返回的函数，经过 enhancer 函数处理后返回增强后的 Store，其他方法属性均不变，这样，我们就实现了加载中间件。</p>\n<h2 id=\"-redux-\">处理异步请求和 Redux 相关</h2>\n<p>笔者尝试做一些归纳，redux 的思想是统一管理 state 变化，至于怎么变化全交给 action，而 reducer 用于组装 newState。真正的业务逻辑不关心数据来源和改变方式，只是发出自己想要的改变指令(diapatch)和根据数据渲染UI视图。</p>\n<p>这样就有一个问题，如果我的数据源是异步来的（这很正常），那我发请求的方法写在哪里呢，想要做到数据处理和视图分离，数据变化交给 action，可是异步请求给了 action 拿不到返回值，我想要的是 <code>async().success(dispatch(action))</code>,这就需要中间件来帮忙了，基本的 redux 只能实现同步 action 改变，异步的解决方案流行的有 <a href=\"https://github.com/gaearon/redux-thunk\">redux-thunk</a> 和 <a href=\"https://github.com/redux-saga/redux-saga\">redux-saga</a></p>\n<p>redux-thunk 十分轻量，代码只有14行</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createThunkMiddleware</span><span class=\"token punctuation\">(</span>extraArgument<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> getState <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> next <span class=\"token operator\">=</span><span class=\"token operator\">></span> action <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">,</span> extraArgument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> thunk <span class=\"token operator\">=</span> <span class=\"token function\">createThunkMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthunk<span class=\"token punctuation\">.</span>withExtraArgument <span class=\"token operator\">=</span> createThunkMiddleware<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> thunk<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>原理简单的令人发指，action 可以为函数，如果是异步函数，等到异步请求回来后再执行 dispatch，目前有 5755 个 star！！！</p>\n<p>redux-saga 体量比较大，thunk 虽然源代码很简单，但需要使用者配合着去修改 action 为函数，saga 则是自己实现一套逻辑处理异步请求，saga 笔者还没有掌握，就不在这里班门弄斧了。</p>\n<p>看懂了源代码并不意味着完全掌握，笔者在研读官方例子时深有体会，所以在这里也建议大家配合官方demo继续深入学习。</p>\n<h2 id=\"-\">总结</h2>\n<p>至此，我们已经将 redux 源码全都堵读了一遍，笔者在其中省略了一些环境判断和错误处理，有兴趣的同学可以去<a href=\"https://github.com/reactjs/redux\">redux Github</a>上看完整版，redux 的代码如此简洁，初次看完后的我表示相当震惊，这还是我几个月都不明所以的高大上库吗，原来只是不敢去面对而已。</p>\n<p>redux 的衍生库相当多，笔者正在研究 react-redux，在学习过程中又听说了 mobx 状态管理工具，深感学习路线之繁杂和曲折，路漫漫其修远兮，我将上下而求索，期待下一篇产出。</p>\n<p>本文多参考于<a href=\"http://redux.js.org/\">官方文档</a>、胡子大哈的文章<a href=\"http://huziketang.com/books/react/lesson30\">动手实现 Redux</a>和<a href=\"https://github.com/kenberkeley\">kenberkeley</a>的<a href=\"https://github.com/kenberkeley/redux-simple-tutorial/blob/master/redux-advanced-tutorial.md\">Redux 进阶教程</a>，感谢</p>\n"
  },
  {
    "name": "2017-05-18-inherit",
    "title": "JavaScript 继承",
    "date": "2017-05-18",
    "tags": [
      "JavaScript",
      "ES6"
    ],
    "content": "<p>总结一下 <code>js</code> 的继承方式，ES2015 之前的我直接列出来两种成熟方案，发展过程就不管了，参考自《JavaScript高级程序设计（第三版）》，ES2015 之后的继承方式待补充。</p>\n<blockquote>\n<p>时隔两年重看这块，理解提高了很多，呀，两年好快啊<!--more--></p>\n</blockquote>\n<h2 id=\"ecmascript5-\">ECMAScript5 之前的继承</h2>\n<h3 id=\"-\">利用构造函数继承</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//父类函数</span>\n<span class=\"token keyword\">var</span> SuperType <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSuperType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>say <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//子类函数</span>\n<span class=\"token keyword\">var</span> SubType <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    SuperType<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//子类原型继承父类实例，这样就有了父类的属性和方法</span>\nSubType<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//重写子类构造器</span>\nSubType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> SubType<span class=\"token punctuation\">;</span>\n\nSubType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>getAge <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oscar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'22'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ninstance<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//Oscar</span>\ninstance<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//22</span>\n</code></pre>\n<p>这样做有一个问题，父类的属性同时存在于子类的属性和原型上。</p>\n<p><img src=\"../pics/1487572312023.png\" alt=\"Alt text\"></p>\n<h3 id=\"-\">原型继承</h3>\n<p>原型继承的思路是子类属性继承父类属性，子类原型继承父类原型。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//父类函数</span>\n<span class=\"token keyword\">var</span> SuperType <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSuperType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>say <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//原型继承函数</span>\n<span class=\"token keyword\">var</span> inheritPrototype <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>subType<span class=\"token punctuation\">,</span> superType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        F<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//获得一个父类原型副本</span>\n    <span class=\"token comment\" spellcheck=\"true\">//Tip 这里 clone 函数可以用 Object.create 替代，IE9+</span>\n    <span class=\"token keyword\">var</span> prototype <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>superType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> subType<span class=\"token punctuation\">;</span>\n    subType<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//子类函数</span>\n<span class=\"token keyword\">var</span> SubType <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    SuperType<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//子类继承父类原型</span>\n<span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>SubType<span class=\"token punctuation\">,</span> SuperType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nSubType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>getAge <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oscar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'22'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ninstance<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//Oscar</span>\ninstance<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//22</span>\n</code></pre>\n<p>可以看出来比利用构造函数继承好</p>\n<p><img src=\"../pics/1487573103137.png\" alt=\"Alt text\"></p>\n<h2 id=\"ecmascript-6-\">ECMAScript 6 的继承</h2>\n<p>未完待续 ....</p>\n"
  },
  {
    "name": "2016-12-09-type-conversion",
    "title": "JavaScript 类型转换",
    "date": "2016-12-09",
    "tags": [
      "JavaScript"
    ],
    "content": "<p>从原理上讲一下 <code>javascript</code> 的隐式类型转换，10分钟学会类型判断原理。 <!--more--></p>\n<h4 id=\"-\">内置七种基本类型</h4>\n<ul>\n<li>null</li>\n<li>undefined</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>object</li>\n<li>symbol</li>\n</ul>\n<p><code>typeof</code>返回的是类型的字符串值，但是<code>null</code>是例外，<code>typeof null === &#39;object&#39;</code>，这是个<code>bug</code></p>\n<p><code>typeof function</code>的返回值也不是基本类型的字符串值，是因为<code>function</code>是<code>object</code>的一个子类型</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">//true</span>\n</code></pre>\n<p>详情见<a href=\"http://es5.github.io/#x11.4.3\">typeof 规范</a></p>\n<p><img src=\"https://p0.ssl.qhimg.com/d/inn/ad0dcf1f/typeof.png\" alt=\"typeof.png\"></p>\n<h4 id=\"-\">位运算符</h4>\n<p>位运算符要求的是32位整数，小数位和超过32位的整数位忽略</p>\n<ul>\n<li><p><code>|</code>按位或运算符可以将小数转换成整数<code>a | 0</code>，不过要注意整数不能超过32位</p>\n</li>\n<li><p><code>~</code>按位非运算符将操作数所有位取反，在<code>javascript</code>中相当于<code>-(x+1)</code></p>\n</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//5 二进制 101，补满 32位</span>\n<span class=\"token number\">00000000000000000000000000000101</span>\n<span class=\"token comment\" spellcheck=\"true\">//按位取反</span>\n<span class=\"token number\">11111111111111111111111111111010</span>\n<span class=\"token comment\" spellcheck=\"true\">//由于32位开头第一个是1，所以这是一个负数，将二进制转换成负数，需要先反码</span>\n<span class=\"token number\">00000000000000000000000000000101</span>\n<span class=\"token comment\" spellcheck=\"true\">//之后，再+1</span>\n<span class=\"token number\">00000000000000000000000000000110</span>\n<span class=\"token comment\" spellcheck=\"true\">//转换成十进制为6，加上符号变成负数 -6</span>\n</code></pre>\n<p>一个应用是<code>~-1 == 0</code>可以替换</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//有值</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>~~a</code>也可以将a取整</p>\n<h4 id=\"-\">一元运算符</h4>\n<ul>\n<li><code>+</code>运算符把操作数转换成数字</li>\n<li><code>-</code>运算符把操作数转换成数字再改变结果的符号</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//涉及到类型转换，下面讲</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//0</span>\n<span class=\"token operator\">+</span><span class=\"token string\">'42'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//42</span>\n<span class=\"token comment\" spellcheck=\"true\">//++ --会被识别为运算符，所以使用时要加空格</span>\n<span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token operator\">+</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//8</span>\n</code></pre>\n<h3 id=\"-\">类型转换</h3>\n<p>基础概念就不写了，直接来容易迷糊的<code>and</code>原理，抛几个问题</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span>\n<span class=\"token string\">\"0\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//false</span>\n<span class=\"token string\">\"\"</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span>\n<span class=\"token string\">\"foo\"</span>  <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span>\n</code></pre>\n<h4 id=\"toprimitive\">ToPrimitive</h4>\n<p>首先介绍一下es内部抽象操作<a href=\"http://es5.github.io/#x9.1\"><code>ToPrimitive</code></a>，它的作用是将输入转换成非对象类型数据，最后的返回值是基本类型值，或者抛错</p>\n<blockquote>\n<p>The abstract operation ToPrimitive takes an input argument and an optional argument PreferredType. The abstract operation ToPrimitive converts its input argument to a non-Object type. </p>\n</blockquote>\n<p><img src=\"https://p2.ssl.qhimg.com/d/inn/7b76ffe6/ToPrimitive.png\" alt=\"Paste_Image.png\"></p>\n<p><code>ToPrimitive</code>转换对象的时候调用<code>[[DefaultValue]]</code>内部方法，可带一个参数<code>hint</code>，代表如果这个对象可以转成多种基本类型值，我们把它转成哪种，默认是<code>Number</code></p>\n<p><code>[[DefaultValue]]</code>的转换办法是</p>\n<ul>\n<li><code>hint</code>是<code>String</code>的话先看有没有<code>toString</code>方法，有调用<code>toString</code>，如果是基本类型值则返回，否则看有没有<code>valueOf</code>方法，有调用<code>valueOf</code>，是基本类型值返回，不是的话抛<code>TypeError</code>错误</li>\n<li><code>hint</code>是<code>Number</code>的话则是先看<code>valueOf</code>方法，后看<code>toString</code>方法</li>\n<li>没有<code>hint</code>参数则按<code>Number</code>的规则转，<code>Date</code>对象例外，用<code>String</code>转</li>\n</ul>\n<h4 id=\"-\">字符串和数字之间的隐式强制类型转换</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//'1,23,4'</span>\n</code></pre>\n<p><code>+</code> 加号转换原则简单说就是某个操作数是字符串，或者可以通过<code>ToPrimitive</code>转成字符串，那就执行字符串拼接操作，否则进行数字加法。</p>\n<p><code>[1,2]</code>是个对象，调用内部的<code>[[DefaultValue]]</code>方法，<code>valueOf</code>方法得到的是<code>[1,2]</code>不是基本类型值，调用<code>toString</code>得到字符串<code>&#39;1,2&#39;</code>，<code>[3,4]</code>同理，最后执行字符串拼接得到<code>&#39;1,23,4&#39;</code></p>\n<p><strong>疑惑</strong></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//\"[object Object]\"</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//0</span>\n</code></pre>\n<p>这里先说一下后者，因为<code>{}</code>在javascript里被识别为代码块，自己就执行了，所以<code>{} + []</code>被解析成<code>+ []</code>，这里的<code>+</code>是一元运算符，将<code>[]</code>转换成数字，也就是通过<code>ToPrimitive</code>得到字符串<code>&quot;&quot;</code>，转成数字为<code>0</code>\n前者被解析成了字符串拼接，<code>&quot;&quot;</code>+<code>[object Object]</code></p>\n<h4 id=\"-\">宽松相等和严格相等</h4>\n<blockquote>\n<p>“ ==允许在相等比较中进行强制类型转换，而 === 不允许”</p>\n</blockquote>\n<p>规范里算法很多，挑几个代表性的</p>\n<h5 id=\"-number-compare-string\">一、Number Compare String</h5>\n<p><img src=\"https://p5.ssl.qhimg.com/t0116760129d3211811.png\" alt=\"Paste_Image.png\"></p>\n<h5 id=\"-boolean-compare-with-other\">二、Boolean Compare with other</h5>\n<p><img src=\"https://p2.ssl.qhimg.com/t01655fc1603510c153.png\" alt=\"Paste_Image.png\"></p>\n<h5 id=\"-object-compare-with-string-or-number\">三、Object Compare with String or Number</h5>\n<p><img src=\"https://p3.ssl.qhimg.com/t01fca09e489bcddf09.png\" alt=\"Paste_Image.png\"></p>\n<h5 id=\"-null-undefined\">四、null == undefined</h5>\n<p>现在来看一下之前提出的几个问题</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//![]转换成boolean值为0,[] == 0，[]根据规则进行ToPrimitive([]),得到\"\" == 0,再转成 ToNumber(\"\") == 0</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//字符串比较</span>\n<span class=\"token string\">\"0\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//false</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//ToNumber(\"\") == 0</span>\n<span class=\"token string\">\"\"</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//ToPrimitive([\"foo\"]) == \"foo\"</span>\n<span class=\"token string\">\"foo\"</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//true</span>\n</code></pre>\n<h3 id=\"-\">收获</h3>\n<p>明白了隐式类型转换规则，平时写代码的时候也要注意，不要写容易让别人困惑的代码；\n最大的收获是查官方规范，看别人的博客太麻烦了，这里讲的不清楚，那里讲的模模糊糊，直接看规范，一看就懂了。</p>\n"
  }
]